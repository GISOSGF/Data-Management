import os
import matplotlib.pyplot as plt
import time

# === USER INPUT ===
scan_path = r"INPUT DRIVE OR FOLDER PATHWAY HERE"  # <-- Change to any folder or drive
log_file = "file_scan_log.txt"

# === LOGGING ===
def log_message(message):
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(message + "\n")
    print(message)

# === FORMAT SIZE ===
def format_gb(bytes_val):
    return bytes_val / (1024 ** 3)

# === MAIN FUNCTION ===
def scan_files(path):
    if not os.path.exists(path):
        log_message(f"❌ Path does not exist: {path}")
        return []

    log_message(f"🚀 Starting file scan: {path}")
    start_time = time.time()

    file_sizes = []
    total_files = 0

    for dirpath, _, filenames in os.walk(path):
        for f in filenames:
            try:
                fp = os.path.join(dirpath, f)
                if os.path.exists(fp):
                    size = os.path.getsize(fp)
                    file_sizes.append((fp, size))
                    total_files += 1

                    if total_files % 1000 == 0:
                        log_message(f"📄 Scanned {total_files} files...")

            except Exception as e:
                log_message(f"⚠️ Skipped file: {fp} | {e}")

    elapsed = time.time() - start_time
    log_message(f"✅ File scan complete in {elapsed:.2f}s | Total files: {total_files}")
    return file_sizes

# === PLOT ===
def plot_top_files(file_sizes):
    top = sorted(file_sizes, key=lambda x: x[1], reverse=True)[:10]
    names = [os.path.basename(f[0]) for f in top]
    sizes = [format_gb(f[1]) for f in top]
    paths = [f[0] for f in top]

    plt.figure(figsize=(12, 6))
    bars = plt.barh(names, sizes, color="salmon")
    plt.xlabel("Size (GB)")
    plt.title("Top 10 Largest Files")
    plt.gca().invert_yaxis()

    # Annotate paths
    for bar, path in zip(bars, paths):
        plt.text(bar.get_width() + 0.1, bar.get_y() + bar.get_height() / 2, path, va='center', fontsize=8)

    plt.tight_layout()
    plt.show()

# === RUN ===
if __name__ == "__main__":
    files = scan_files(scan_path)
    plot_top_files(files)
    log_message("✅ File analysis complete.\n")
