import os
import shutil
import matplotlib.pyplot as plt
import time

# === USER INPUT ===
scan_path = r"C:\Users\kp.osgf\Documents\Drone2Map"  # <-- Change to any folder or drive
log_file = "folder_scan_log.txt"

# === LOGGING ===
def log_message(message):
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(message + "\n")
    print(message)

# === FORMAT SIZE ===
def format_gb(bytes_val):
    return bytes_val / (1024 ** 3)

# === RECURSIVE FOLDER SIZE ===
def get_folder_size(path):
    total = 0
    for dirpath, _, filenames in os.walk(path, topdown=True):
        for f in filenames:
            try:
                fp = os.path.join(dirpath, f)
                if os.path.exists(fp):
                    total += os.path.getsize(fp)
            except Exception as e:
                log_message(f"⚠️ Skipped file: {fp} | {e}")
    return total

# === MAIN FUNCTION ===
def scan_folders(path):
    if not os.path.exists(path):
        log_message(f"❌ Path does not exist: {path}")
        return []

    log_message(f"🚀 Starting folder scan: {path}")
    start_time = time.time()

    folder_sizes = []
    total_folders = 0

    for dirpath, dirnames, _ in os.walk(path):
        try:
            size = get_folder_size(dirpath)
            folder_sizes.append((dirpath, size))
            total_folders += 1

            if total_folders % 25 == 0:
                log_message(f"📁 Scanned {total_folders} folders...")

        except Exception as e:
            log_message(f"❌ Failed folder: {dirpath} | {e}")

    elapsed = time.time() - start_time
    log_message(f"✅ Folder scan complete in {elapsed:.2f}s | Total folders: {total_folders}")
    return folder_sizes

# === PLOT ===
def plot_top_folders(folder_sizes):
    top = sorted(folder_sizes, key=lambda x: x[1], reverse=True)[:10]
    names = [os.path.basename(f[0]) or f[0] for f in top]
    sizes = [format_gb(f[1]) for f in top]

    plt.figure(figsize=(12, 6))
    plt.barh(names, sizes, color="teal")
    plt.xlabel("Size (GB)")
    plt.title("Top 10 Largest Folders")
    plt.gca().invert_yaxis()
    plt.tight_layout()
    plt.show()

# === DISK USAGE ===
def show_disk_usage(path):
    try:
        drive = os.path.splitdrive(os.path.abspath(path))[0] + "\\"
        total, used, free = shutil.disk_usage(drive)
        log_message(f"\n💾 Drive: {drive}")
        log_message(f"  ▪ Total: {format_gb(total):.2f} GB")
        log_message(f"  ▪ Used:  {format_gb(used):.2f} GB")
        log_message(f"  ▪ Free:  {format_gb(free):.2f} GB")
    except Exception as e:
        log_message(f"❌ Disk usage check failed: {e}")

# === RUN ===
if __name__ == "__main__":
    folders = scan_folders(scan_path)
    show_disk_usage(scan_path)
    plot_top_folders(folders)
    log_message("✅ Folder analysis complete.\n")
